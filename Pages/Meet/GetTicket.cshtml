@page
@model ProjektSpotkaniaGrupTematycznych.Pages.Meet.GetTicketModel
@{
}

<div id="details">
    <h4>Ticket Details</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Ticket.Owner.FirstName)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Ticket.Owner.FirstName)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Ticket.Owner.LastName)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Ticket.Owner.LastName)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Group.GroupName)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Group.GroupName)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Meeting.Topic)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Meeting.Topic)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Meeting.Location)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Meeting.Location)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Meeting.Date)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Meeting.Date)
        </dd>
        <dt class="col-sm-2">
            <a>QR</a>
        </dt>
        <dd class="col-sm-10">
            <img src="@String.Format("data:image/png;base64,{0}", Convert.ToBase64String(Model.QR))" height="200" width= ="200" />
        </dd>
    </dl>
</div>

<button class="btn btn-primary" onclick="javascript:demoFromHTML();">Generate PDF</button>

@section Scripts
{
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.3.2/jspdf.min.js"></script>
    <script>
        function demoFromHTML() {
            var pdf = new jsPDF('p', 'pt', 'letter');
            // source can be HTML-formatted string, or a reference
            // to an actual DOM element from which the text will be scraped.
            source = $('#details')[0];

            // we support special element handlers. Register them with jQuery-style
            // ID selector for either ID or node name. ("#iAmID", "div", "span" etc.)
            // There is no support for any other type of selectors
            // (class, of compound) at this time.
            specialElementHandlers = {
                // element with id of "bypass" - jQuery style selector
                '#bypassme': function (element, renderer) {
                    // true = "handled elsewhere, bypass text extraction"
                    return true
                }
            };
            margins = {
                top: 80,
                bottom: 60,
                left: 40,
                width: 522
            };
            // all coords and widths are in jsPDF instance's declared units
            // 'inches' in this case
            pdf.fromHTML(
                source, // HTML string or DOM elem ref.
                margins.left, // x coord
                margins.top, { // y coord
                'width': margins.width, // max width of content on PDF
                'elementHandlers': specialElementHandlers
            },

                function (dispose) {
                    // dispose: object with X, Y of the last line add to the PDF
                    //          this allow the insertion of new lines after html
                    pdf.save('Ticket.pdf');
                }, margins);
        }
    </script>
}
